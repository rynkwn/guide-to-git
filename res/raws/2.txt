_________________________________________

Level 2: Working together alone

(Branches/Branching)
_________________________________________

_________________

What are branches?
_________________

You'll notice that when you run through our favorite command,
`git status`, there's a line that says something like
"On branch master".

Branches are a way to organize commits. In industry, they're
usually used to separate work, so that individuals can commit
their work without worrying stepping on each other's toes (like
a cleaner way of everyone on a team simultaneously editing
the same google doc).

Once you're done with the feature, you usually "merge" back into
the master branch so that everyone has access to your work.

Master contains commits from Branch A
      ^
      |
      |\ Merge back into Master.
      | \
      |  \
      |   \
      |    | Commit
      |    | Commit
Commit|    | Commit
      |    ^ Commit
      |    | Branch A
      |   /
      |  /
      | /
      |/
      ^
      |
    Master

_________________

Using branches in Git
_________________

If you type `git branch`, you should see something
like:

`* master`

Which just means you're on the master branch, which
is the default branch. Let's create a new branch
so we can experiment with some changes.

`git checkout -b experiment`

(The `-b` flag just creates a new branch.) 
Now. Let's make some changes! Create a file,
add it, and commit it!

If you type `git log`, you should see your commit
among the list of changes.

Now let's move back to the master branch!

`git checkout master`

You should notice that none of your changes are there.
However, if we `git checkout experiment`, then we'll
find our changes still present.

_________________

Branching off.
_________________

When you're on branch A, and you create a new branch B,
then B is "branched" from A.

For example, if you go back to `git checkout master`, create
a new branch `git checkout -b new`, then you'll notice
that the `new` branch is identical to master.

Alternatively, you can go to the `experiment`, create a new
branch `newb`, and you'll find that it starts off identical
to the `experiment` branch.

_________________

Trimming (Deleting Branches)
_________________

You might find that `git branch` now shows a lot of branches.
This can get pretty troublesome. Luckily there are two relevant
commands:

`git branch -d some_branch`

This'll delete a branch _only_ if the branch you're currently on
contains all of its commits. So it's a safe way to get rid of branches
that have already been brought back into master.

You can also do:

`git branch -D some_branch`

Which, because the flag is capitalized, just means "delete this 
branch. I don't care what the differences are."